class Node {
  dynamic data;
  Node? next;

  Node(this.data);
}

class LinkedList {
  Node? head;

  void append(dynamic data) {
    Node newNode = Node(data);
    if (head == null) {
      head = newNode;
      return;
    }

    Node current = head!;
    while (current.next != null) {
      current = current.next!;
    }

    current.next = newNode;
  }

  void printList() {
    Node? current = head;
    while (current != null) {
      print(current.data);
      current = current.next;
    }
  }

  void printInReverse() {
    _printInReverse(head);
  }

  void _printInReverse(Node? node) {
    if (node == null) {
      return;
    }

    _printInReverse(node.next);
    print(node.data);
  }

  Node? findMiddleNode() {
    if (head == null) {
      return null;
    }

    Node? slow = head;
    Node? fast = head;

    while (fast != null && fast.next != null) {
      slow = slow!.next;
      fast = fast.next!.next;
    }

    return slow;
  }

  void reverse() {
    Node? prev = null;
    Node? current = head;
    Node? next;

    while (current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
    }

    head = prev;
  }

  void removeOccurrences(dynamic target) {
    Node? current = head;
    Node? prev = null;

    while (current != null) {
      if (current.data == target) {
        if (prev == null) {
          head = current.next;
        } else {
          prev.next = current.next;
        }
      } else {
        prev = current;
      }

      current = current.next;
    }
  }
}

void main() {
  LinkedList linkedList = LinkedList();
  linkedList.append(1);
  linkedList.append(2);
  linkedList.append(3);
  linkedList.append(4);
  linkedList.append(3);
  linkedList.append(5);

  print("1: Print in Reverse");
  linkedList.printInReverse();

  print("\n2: Find the Middle Node");
  Node? middleNode = linkedList.findMiddleNode();
  print("Middle Node: ${middleNode?.data}");

  print("\n3: Reverse a Linked List");
  linkedList.reverse();
  linkedList.printList();

  print("\n4: Remove All Occurrences");
  linkedList.removeOccurrences(3);
  linkedList.printList();
}
